{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/tech-notes/program/cpp/cpp_func_ptr_to_c_func_ptr","result":{"data":{"mdx":{"id":"60ed90f8-c7a9-52dc-9795-69093ea39252","excerpt":"Sometimes, you may want to pass a C++ member function as the callback function to a C library API function. Likely people will tell you it's only possible ifâ€¦","fields":{"slug":"/tech-notes/program/cpp/cpp_func_ptr_to_c_func_ptr/"},"frontmatter":{"title":"Convert C++ Function Pointer to C Function Pointer","description":null,"image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Convert C++ Function Pointer to C Function Pointer\",\n  \"description\": null\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Sometimes, you may want to pass a C++ member function as the callback function to a C library API function. Likely people will tell you it's only possible if the member function is static. But here is one possible solution  \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"template <typename T>\\nstruct Callback;\\n\\ntemplate <typename Ret, typename... Params>\\nstruct Callback<Ret(Params...)> {\\n    template <typename... Args>\\n    static Ret callback(Args... args) { return func(args...); }\\n    static std::function<Ret(Params...)> func;\\n};\\n\\n// Initialize the static member.\\ntemplate <typename Ret, typename... Params>\\nstd::function<Ret(Params...)> Callback<Ret(Params...)>::func;\\n\\n//////////////////////////////////////////////\\n\\nstruct Foo {\\n    void print(int* x) { // Some member function.\\n        std::cout << *x << std::endl;\\n    }\\n};\\n\\nint main() {\\n    Foo foo; // Create instance of Foo.\\n\\n    // Store member function and the instance using std::bind.\\n    Callback<void(int*)>::func = std::bind(&Foo::print, foo, std::placeholders::_1);\\n\\n    // Convert callback-function to c-pointer.\\n    void (*c_func)(int*) = static_cast<decltype(c_func)>(Callback<void(int*)>::callback);\\n\\n    // Use in any way you wish.\\n    std::unique_ptr<int> iptr{new int(5)};\\n    c_func(iptr.get());\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Reference: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://stackoverflow.com/a/19809787/2200873\"\n  }, \"https://stackoverflow.com/a/19809787/2200873\"))));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[]}},"pageContext":{"slug":"/tech-notes/program/cpp/cpp_func_ptr_to_c_func_ptr/","next":{"label":"Back to Main Page","link":"https://rdu.im"},"repositoryEditUrl":"https://github.com/rxdu/note/tree/main/src/docs/tech-notes/program/cpp/cpp_func_ptr_to_c_func_ptr.mdx","repositoryProvider":"GitHub"}},"staticQueryHashes":["1954253342","2328931024","2501019404","973074209"]}