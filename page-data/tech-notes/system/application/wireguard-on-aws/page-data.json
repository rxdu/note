{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/tech-notes/system/application/wireguard-on-aws","result":{"data":{"mdx":{"id":"a316be98-466e-5826-9713-ab6d5d155548","excerpt":"Tested Environment Debian 10.5 on AWS Ubuntu 20.04 on AWS Install wireguard on server Note that the package \"linux-headers-$(uname -r)\" is necessary to runâ€¦","fields":{"slug":"/tech-notes/system/application/wireguard-on-aws/"},"frontmatter":{"title":"Wireguard Setup on AWS","description":"Instructions on setting up Wireguard on AWS","image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Wireguard Setup on AWS\",\n  \"description\": \"Instructions on setting up Wireguard on AWS\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"tested-environment\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#tested-environment\",\n    \"aria-label\": \"tested environment permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Tested Environment\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Debian 10.5 on AWS\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ubuntu 20.04 on AWS\")), mdx(\"h2\", {\n    \"id\": \"install-wireguard-on-server\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#install-wireguard-on-server\",\n    \"aria-label\": \"install wireguard on server permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Install wireguard on server\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ sudo apt-get install wireguard-dkms wireguard-tools linux-headers-$(uname -r)\\n\")), mdx(\"p\", null, \"Note that the package \\\"linux-headers-$(uname -r)\\\" is necessary to run wireguard.\"), mdx(\"p\", null, \"Next we need to enable IP Forwarding. Open \\\"/etc/sysctl.conf\\\" and search for the line \\\"#net.ipv4.ip_forward\\\". Uncomment this line by removing the # at the beginning. It should look like this: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"net.ipv4.ip_forward=1\\n\")), mdx(\"h2\", {\n    \"id\": \"generate-server-and-client-keys\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#generate-server-and-client-keys\",\n    \"aria-label\": \"generate server and client keys permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Generate server and client keys\"), mdx(\"p\", null, \"You will need root privilege to manipuate the \\\"/etc/wireguard\\\" directory\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ sudo -i \\n$ cd /etc/wireguard\\n$ umask 077\\n$ wg genkey | tee server_private_key | wg pubkey > server_public_key\\n\")), mdx(\"p\", null, \"You will need to create a key pair for each client  (more deails below, not needed for now)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ wg genkey | tee <client_private_key_name> | wg pubkey > <client_public_key_name>\\n\")), mdx(\"h2\", {\n    \"id\": \"generate-server-and-client-keys-1\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#generate-server-and-client-keys-1\",\n    \"aria-label\": \"generate server and client keys 1 permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Generate server and client keys\"), mdx(\"p\", null, \"You will need root privilege to manipuate the \\\"/etc/wireguard\\\" directory\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ sudo -i \\n$ cd /etc/wireguard\\n$ umask 077\\n$ wg genkey | tee server_private_key | wg pubkey > server_public_key\\n\")), mdx(\"p\", null, \"You will need to create a key pair for each client  (more deails below, not needed for now)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ wg genkey | tee <client_private_key_name> | wg pubkey > <client_public_key_name>\\n\")), mdx(\"h2\", {\n    \"id\": \"create-server-configuration-file\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#create-server-configuration-file\",\n    \"aria-label\": \"create server configuration file permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Create server configuration file\"), mdx(\"p\", null, \"Create a file \\\"\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/etc/wireguard/wg0.conf\\\"\"), \" with the following content\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"[Interface]\\nAddress = 10.200.200.1/24\\nSaveConfig = true\\nPostUp = /etc/wireguard/iptable-set.sh\\nPostDown = /etc/wireguard/iptable-reset.sh\\nListenPort = 51820\\nPrivateKey = <insert server_private_key>\\n\\n[Peer]\\nPublicKey = <insert client_public_key>\\nAllowedIPs = 10.200.200.2/32\\n\\n\")), mdx(\"p\", null, \"Note in the above example,  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\\"10.200.200.0\\\" range is used for the VPN network. You can change it to other preferred ranges\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The ListenPort has to be accesible and you will need to add a rule in your Firewall to allow \\\"UDP:<ListenPort\", \">\", \"\\\"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Two scripts are used to set up or recover the routing table when you bring up or down the VPN network\")), mdx(\"p\", null, \"The setup script: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"#!/bin/bash\\n\\n# Reference:\\n#  [1] https://www.ckn.io/blog/2017/11/14/wireguard-vpn-typical-setup/\\n#  [2] https://www.cyberciti.biz/faq/how-to-set-up-wireguard-firewall-rules-in-linux/\\n\\nIN_FACE=\\\"eth0\\\"                   # NIC connected to the internet\\nWG_FACE=\\\"wg0\\\"                    # WG NIC \\nSUB_NET=\\\"10.200.200.0/24\\\"            # WG IPv4 sub/net aka CIDR\\nWG_PORT=\\\"51820\\\"                  # WG udp port\\n \\n# track VPN connection\\n/sbin/iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\\n/sbin/iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\\n\\n# allow incoming VPN traffic on the listening port\\n/sbin/iptables -A INPUT -p udp -m udp --dport $WG_PORT -m conntrack --ctstate NEW -j ACCEPT\\n# allow both TCP and UDP recursive DNS traffic\\n/sbin/iptables -A INPUT -s $SUB_NET -p tcp -m tcp --dport 53 -m conntrack --ctstate NEW -j ACCEPT\\n/sbin/iptables -A INPUT -s $SUB_NET -p udp -m udp --dport 53 -m conntrack --ctstate NEW -j ACCEPT\\n# allow forwarding of packets between interfaces\\n/sbin/iptables -A FORWARD -i $WG_FACE -o $WG_FACE -m conntrack --ctstate NEW -j ACCEPT\\n/sbin/iptables -A FORWARD -i $IN_FACE -o $WG_FACE -m conntrack --ctstate NEW -j ACCEPT\\n/sbin/iptables -A FORWARD -i $WG_FACE -o $IN_FACE -m conntrack --ctstate NEW -j ACCEPT\\n# set up nat\\n/sbin/iptables -t nat -A POSTROUTING -s $SUB_NET -o $IN_FACE -j MASQUERADE\\n\\n\")), mdx(\"p\", null, \"The recovery script:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"#!/bin/bash\\n \\nIN_FACE=\\\"eth0\\\"                   # NIC connected to the internet\\nWG_FACE=\\\"wg0\\\"                    # WG NIC \\nSUB_NET=\\\"10.200.200.0/24\\\"            # WG IPv4 sub/net aka CIDR\\nWG_PORT=\\\"51820\\\"                  # WG udp port\\n\\n# allow incoming VPN traffic on the listening port\\n/sbin/iptables -D INPUT -p udp -m udp --dport $WG_PORT -m conntrack --ctstate NEW -j ACCEPT\\n# allow both TCP and UDP recursive DNS traffic\\n/sbin/iptables -D INPUT -s $SUB_NET -p tcp -m tcp --dport 53 -m conntrack --ctstate NEW -j ACCEPT\\n/sbin/iptables -D INPUT -s $SUB_NET -p udp -m udp --dport 53 -m conntrack --ctstate NEW -j ACCEPT\\n# allow forwarding of packets between interfaces\\n/sbin/iptables -D FORWARD -i $WG_FACE -o $WG_FACE -m conntrack --ctstate NEW -j ACCEPT\\n/sbin/iptables -D FORWARD -i $IN_FACE -o $WG_FACE -m conntrack --ctstate NEW -j ACCEPT\\n/sbin/iptables -D FORWARD -i $WG_FACE -o $IN_FACE -m conntrack --ctstate NEW -j ACCEPT\\n# set up nat\\n/sbin/iptables -t nat -D POSTROUTING -s $SUB_NET -o $IN_FACE -j MASQUERADE\\n\\n\")), mdx(\"h2\", {\n    \"id\": \"configure-dns\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#configure-dns\",\n    \"aria-label\": \"configure dns permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Configure DNS\"), mdx(\"p\", null, \"Here \\\"ubound\\\" is used to provide DNS \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ apt-get install unbound unbound-host dnsutils\\n\")), mdx(\"p\", null, \"Download the list of root DNS servers\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ curl -o /var/lib/unbound/root.hints https://www.internic.net/domain/named.cache\\n$ chown -R unbound:unbound /var/lib/unbound\\n$ cd /etc/unbound/unbound.conf.d\\n$ nano unbound_srv.conf\\n\")), mdx(\"p\", null, \"Add the following content\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"server:\\n\\n  num-threads: 4\\n\\n  #Enable logs\\n  verbosity: 1\\n\\n  #list of Root DNS Server\\n  root-hints: \\\"/var/lib/unbound/root.hints\\\"\\n\\n  #Use the root servers key for DNSSEC\\n  #auto-trust-anchor-file: \\\"/var/lib/unbound/root.key\\\"\\n\\n  #Respond to DNS requests on all interfaces\\n  interface: 0.0.0.0\\n  max-udp-size: 3072\\n\\n  #Authorized IPs to access the DNS Server\\n  access-control: 0.0.0.0/0                 refuse\\n  access-control: 127.0.0.1                 allow\\n  access-control: 10.200.200.0/24               allow\\n\\n  #not allowed to be returned for public internet  names\\n  private-address: 10.200.200.0/24\\n\\n  # Hide DNS Server info\\n  hide-identity: yes\\n  hide-version: yes\\n\\n  #Limit DNS Fraud and use DNSSEC\\n  harden-glue: yes\\n  harden-dnssec-stripped: yes\\n  harden-referral-path: yes\\n\\n  #Add an unwanted reply threshold to clean the cache and avoid when possible a DNS Poisoning\\n  unwanted-reply-threshold: 10000000\\n\\n  #Have the validator print validation failures to the log.\\n  val-log-level: 1\\n\\n  #Minimum lifetime of cache entries in seconds\\n  cache-min-ttl: 1800\\n\\n  #Maximum lifetime of cached entries\\n  cache-max-ttl: 14400\\n  prefetch: yes\\n  prefetch-key: yes\\n\\n\")), mdx(\"p\", null, \"Now restart unbound service and enable it to autostart\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ systemctl restart unbound\\n$ systemctl enable unbound\\n\")), mdx(\"h2\", {\n    \"id\": \"create-server-configuration-file-1\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#create-server-configuration-file-1\",\n    \"aria-label\": \"create server configuration file 1 permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Create server configuration file\"), mdx(\"p\", null, \"Create a file \\\"\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/etc/wireguard/wg0.conf\\\"\"), \" with the following content\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"[Interface]\\nAddress = 10.200.200.1/24\\nSaveConfig = true\\nPostUp = /etc/wireguard/iptable-set.sh\\nPostDown = /etc/wireguard/iptable-reset.sh\\nListenPort = 51820\\nPrivateKey = <insert server_private_key\\\\>\\n\\n[Peer]\\nPublicKey = <insert client_public_key\\\\>\\nAllowedIPs = 10.200.200.2/32\\n\\n\")), mdx(\"p\", null, \"Note in the above example,  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\\"10.200.200.0\\\" range is used for the VPN network. You can change it to other preferred ranges\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The ListenPort has to be accesible and you will need to add a rule in your Firewall to allow \\\"UDP:<ListenPort\", \">\", \"\\\"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Two scripts are used to set up or recover the routing table when you bring up or down the VPN network\"))), mdx(\"p\", null, \"The setup script: \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"#!/bin/bash\\n\\n# Reference:\\n#  [1] https://www.ckn.io/blog/2017/11/14/wireguard-vpn-typical-setup/\\n#  [2] https://www.cyberciti.biz/faq/how-to-set-up-wireguard-firewall-rules-in-linux/\\n\\nIN_FACE=\\\"eth0\\\"                   # NIC connected to the internet\\nWG_FACE=\\\"wg0\\\"                    # WG NIC \\nSUB_NET=\\\"10.200.200.0/24\\\"            # WG IPv4 sub/net aka CIDR\\nWG_PORT=\\\"51820\\\"                  # WG udp port\\n \\n# track VPN connection\\n/sbin/iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\\n/sbin/iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\\n\\n# allow incoming VPN traffic on the listening port\\n/sbin/iptables -A INPUT -p udp -m udp --dport $WG_PORT -m conntrack --ctstate NEW -j ACCEPT\\n# allow both TCP and UDP recursive DNS traffic\\n/sbin/iptables -A INPUT -s $SUB_NET -p tcp -m tcp --dport 53 -m conntrack --ctstate NEW -j ACCEPT\\n/sbin/iptables -A INPUT -s $SUB_NET -p udp -m udp --dport 53 -m conntrack --ctstate NEW -j ACCEPT\\n# allow forwarding of packets between interfaces\\n/sbin/iptables -A FORWARD -i $WG_FACE -o $WG_FACE -m conntrack --ctstate NEW -j ACCEPT\\n/sbin/iptables -A FORWARD -i $IN_FACE -o $WG_FACE -m conntrack --ctstate NEW -j ACCEPT\\n/sbin/iptables -A FORWARD -i $WG_FACE -o $IN_FACE -m conntrack --ctstate NEW -j ACCEPT\\n# set up nat\\n/sbin/iptables -t nat -A POSTROUTING -s $SUB_NET -o $IN_FACE -j MASQUERADE\\n\\n\")), mdx(\"p\", null, \"The recovery script:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"#!/bin/bash\\n \\nIN_FACE=\\\"eth0\\\"                   # NIC connected to the internet\\nWG_FACE=\\\"wg0\\\"                    # WG NIC \\nSUB_NET=\\\"10.200.200.0/24\\\"            # WG IPv4 sub/net aka CIDR\\nWG_PORT=\\\"51820\\\"                  # WG udp port\\n\\n# allow incoming VPN traffic on the listening port\\n/sbin/iptables -D INPUT -p udp -m udp --dport $WG_PORT -m conntrack --ctstate NEW -j ACCEPT\\n# allow both TCP and UDP recursive DNS traffic\\n/sbin/iptables -D INPUT -s $SUB_NET -p tcp -m tcp --dport 53 -m conntrack --ctstate NEW -j ACCEPT\\n/sbin/iptables -D INPUT -s $SUB_NET -p udp -m udp --dport 53 -m conntrack --ctstate NEW -j ACCEPT\\n# allow forwarding of packets between interfaces\\n/sbin/iptables -D FORWARD -i $WG_FACE -o $WG_FACE -m conntrack --ctstate NEW -j ACCEPT\\n/sbin/iptables -D FORWARD -i $IN_FACE -o $WG_FACE -m conntrack --ctstate NEW -j ACCEPT\\n/sbin/iptables -D FORWARD -i $WG_FACE -o $IN_FACE -m conntrack --ctstate NEW -j ACCEPT\\n# set up nat\\n/sbin/iptables -t nat -D POSTROUTING -s $SUB_NET -o $IN_FACE -j MASQUERADE\\n\\n\")), mdx(\"h2\", {\n    \"id\": \"configure-dns-1\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#configure-dns-1\",\n    \"aria-label\": \"configure dns 1 permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Configure DNS\"), mdx(\"p\", null, \"Here \\\"ubound\\\" is used to provide DNS \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ apt-get install unbound unbound-host dnsutils\\n\")), mdx(\"p\", null, \"Download the list of root DNS servers\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ curl -o /var/lib/unbound/root.hints https://www.internic.net/domain/named.cache\\n$ chown -R unbound:unbound /var/lib/unbound\\n$ cd /etc/unbound/unbound.conf.d\\n$ nano unbound_srv.conf\\n\")), mdx(\"p\", null, \"Add the following content\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"server:\\n\\n  num-threads: 4\\n\\n  #Enable logs\\n  verbosity: 1\\n\\n  #list of Root DNS Server\\n  root-hints: \\\"/var/lib/unbound/root.hints\\\"\\n\\n  #Use the root servers key for DNSSEC\\n  #auto-trust-anchor-file: \\\"/var/lib/unbound/root.key\\\"\\n\\n  #Respond to DNS requests on all interfaces\\n  interface: 0.0.0.0\\n  max-udp-size: 3072\\n\\n  #Authorized IPs to access the DNS Server\\n  access-control: 0.0.0.0/0                 refuse\\n  access-control: 127.0.0.1                 allow\\n  access-control: 10.200.200.0/24               allow\\n\\n  #not allowed to be returned for public internet  names\\n  private-address: 10.200.200.0/24\\n\\n  # Hide DNS Server info\\n  hide-identity: yes\\n  hide-version: yes\\n\\n  #Limit DNS Fraud and use DNSSEC\\n  harden-glue: yes\\n  harden-dnssec-stripped: yes\\n  harden-referral-path: yes\\n\\n  #Add an unwanted reply threshold to clean the cache and avoid when possible a DNS Poisoning\\n  unwanted-reply-threshold: 10000000\\n\\n  #Have the validator print validation failures to the log.\\n  val-log-level: 1\\n\\n  #Minimum lifetime of cache entries in seconds\\n  cache-min-ttl: 1800\\n\\n  #Maximum lifetime of cached entries\\n  cache-max-ttl: 14400\\n  prefetch: yes\\n  prefetch-key: yes\\n\\n\")), mdx(\"p\", null, \"Now restart unbound service and enable it to autostart\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ systemctl restart unbound\\n$ systemctl enable unbound\\n\")), mdx(\"p\", null, \"You may need to disable the default DNS resolver if unbound fails to start with an error message saying port 53 has been binded to another process \", \"[8][9]\", \"[10]\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"% use netstat to check whether port 53 has been binded \\n$ netstat -lutnp\\n\\n% disable systemd-resolved\\n$ sudo systemctl stop systemd-resolved\\n$ sudo systemctl disable systemd-resolved\\n\")), mdx(\"p\", null, \"You can test your DNS setup with the following commands and you should expect to see similar results returned\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ nslookup www.google.com. 10.200.200.1\\nServer:     10.8.6.1\\nAddress:    10.8.6.1#53\\n\\nNon-authoritative answer:\\nName:   www.google.com\\nAddress: 74.125.200.99\\nName:   www.google.com\\nAddress: 74.125.200.106\\nName:   www.google.com\\nAddress: 74.125.200.103\\nName:   www.google.com\\nAddress: 74.125.200.105\\nName:   www.google.com\\nAddress: 74.125.200.104\\nName:   www.google.com\\nAddress: 74.125.200.147\\nName:   www.google.com\\nAddress: 2404:6800:4003:c00::68\\nName:   www.google.com\\nAddress: 2404:6800:4003:c00::67\\nName:   www.google.com\\nAddress: 2404:6800:4003:c00::63\\nName:   www.google.com\\nAddress: 2404:6800:4003:c00::93\\n\\n$ unbound-host -C /etc/unbound/unbound.conf -v ietf.org\\n[1599212188] libunbound[2097:0] notice: init module 0: validator\\n[1599212188] libunbound[2097:0] notice: init module 1: iterator\\nietf.org has address 4.31.198.44 (secure)\\nietf.org has IPv6 address 2001:1900:3001:11::2c (secure)\\nietf.org mail is handled by 0 mail.ietf.org. (secure)\\n\\n\")), mdx(\"p\", null, \"Additionally you can use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://dnsleak.com/\"\n  }, \"http://dnsleak.com/\"), \" to test DNS leakage.\"), mdx(\"h2\", {\n    \"id\": \"start-wireguard-service-on-server\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#start-wireguard-service-on-server\",\n    \"aria-label\": \"start wireguard service on server permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Start wireguard service on server\"), mdx(\"p\", null, \"Now you're ready to start the wireguard service on your server\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ sudo wg-quick up wg0\\n$ sudo systemctl enable wg-quick@wg0.service \\n\")), mdx(\"p\", null, \"Use the following command to bring down the service\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"$ sudo wg-quick down wg0\\n\")), mdx(\"h3\", {\n    \"id\": \"setup-clients\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#setup-clients\",\n    \"aria-label\": \"setup clients permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Setup clients\"), mdx(\"h2\", {\n    \"id\": \"server-side\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#server-side\",\n    \"aria-label\": \"server side permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Server side\"), mdx(\"p\", null, \"As mentioned above, you will have create a key pair for each client, for example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"$ wg genkey | tee rdu_acer_private.key | wg pubkey > rdu_acer_public.key\\n\")), mdx(\"p\", null, \"Register the client on the server\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ wg set wg0 peer <new_client_public_key> allowed-ips <new_client_vpn_IP>/32\\n\")), mdx(\"p\", null, \"In the following client setup part, we will assume you've assigned 10.200.200.2/32 to the client rdu-acer. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"You need to restart the \\\"wg0\\\" interface to make this change into effect.\")), mdx(\"h2\", {\n    \"id\": \"client-side\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#client-side\",\n    \"aria-label\": \"client side permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Client side\"), mdx(\"p\", null, \"You can either set up the VPN profile on your device manually or from a QR code\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Manual setup on Linux\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$  sudo apt-get install wireguard-dkms wireguard-tools linux-headers-$(uname -r)\\n\")), mdx(\"p\", null, \"Create the configuration file\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ sudo -i\\n$ nano /etc/wireguard/wg0-acer.conf\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"[Interface]\\nAddress = 10.200.200.2/32\\nPrivateKey = <insert client_private_key>\\nDNS = 10.200.200.1\\n\\n[Peer]\\nPublicKey = <insert server_public_key>\\nEndpoint = <VPN-Server-Public-IP>:<ListenPort>\\nAllowedIPs = 0.0.0.0/0\\nPersistentKeepalive = 25\\n\")), mdx(\"p\", null, \"Now you can bring up the connection\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ sudo wg-quick up wg0-acer\\n$ sudo systemctl enable wg-quick@wg0-acer.service\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"QR code setup on Android\")), mdx(\"p\", null, \"Instead of manually typing in the VPN information on the phone, you can generate a QR code on the server and setup your phone with this QR code.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ cd /etc/wireguard/\\n$ nano rdu_acer_qr.conf\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"[Interface]\\nAddress = 10.200.200.2/32\\nPrivateKey = client_private_key\\nDNS = 10.200.200.1\\n\\n[Peer]\\nPublicKey = server_public_key\\nAllowedIPs = 0.0.0.0/0\\nEndpoint = <VPN-Server-Public-IP>:<ListenPort>\\nPersistentKeepalive = 25\\n\")), mdx(\"p\", null, \"Then generate the QR code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"$ apt install qrencode\\n$ qrencode -t ansiutf8 < rdu_acer_qr.conf\\n\")), mdx(\"p\", null, \"Now you can scan the QR code on your phone to setup the VPN connection.\"), mdx(\"h2\", {\n    \"id\": \"reference\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#reference\",\n    \"aria-label\": \"reference permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Reference\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[1]\", \" \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://golb.hplar.ch/2018/10/wireguard-on-amazon-lightsail.html\"\n  }, \"https://golb.hplar.ch/2018/10/wireguard-on-amazon-lightsail.html\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[2]\", \" \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.ckn.io/blog/2017/11/14/wireguard-vpn-typical-setup/\"\n  }, \"https://www.ckn.io/blog/2017/11/14/wireguard-vpn-typical-setup/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[3]\", \" \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.cyberciti.biz/faq/how-to-set-up-wireguard-firewall-rules-in-linux/\"\n  }, \"https://www.cyberciti.biz/faq/how-to-set-up-wireguard-firewall-rules-in-linux/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[4]\", \" \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://stackoverflow.com/questions/37570910/rtnetlink-answers-operation-not-supported\"\n  }, \"https://stackoverflow.com/questions/37570910/rtnetlink-answers-operation-not-supported\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[5]\", \" \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://emanuelduss.ch/2018/09/wireguard-vpn-road-warrior-setup/\"\n  }, \"https://emanuelduss.ch/2018/09/wireguard-vpn-road-warrior-setup/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[6]\", \" \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://engineerworkshop.com/blog/how-to-set-up-a-wireguard-vpn-server-on-ubuntu-linux/\"\n  }, \"https://engineerworkshop.com/blog/how-to-set-up-a-wireguard-vpn-server-on-ubuntu-linux/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[7]\", \" \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.zahradnik.io/wireguard-a-vpn-with-real-world-usage-in-mind\"\n  }, \"https://www.zahradnik.io/wireguard-a-vpn-with-real-world-usage-in-mind\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[8]\", \" \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://askubuntu.com/questions/907246/how-to-disable-systemd-resolved-in-ubuntu\"\n  }, \"https://askubuntu.com/questions/907246/how-to-disable-systemd-resolved-in-ubuntu\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[9]\", \" \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://blobfolio.com/2017/05/fix-linux-dns-issues-caused-by-systemd-resolved/\"\n  }, \"https://blobfolio.com/2017/05/fix-linux-dns-issues-caused-by-systemd-resolved/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[10]\", \" \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://askubuntu.com/questions/59458/error-message-sudo-unable-to-resolve-host-none\"\n  }, \"https://askubuntu.com/questions/59458/error-message-sudo-unable-to-resolve-host-none\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[11]\", \" \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.linuxbabe.com/ubuntu/set-up-local-dns-resolver-ubuntu-20-04-bind9\"\n  }, \"https://www.linuxbabe.com/ubuntu/set-up-local-dns-resolver-ubuntu-20-04-bind9\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[12]\", \" \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://nlnetlabs.nl/documentation/unbound/howto-anchor/\"\n  }, \"https://nlnetlabs.nl/documentation/unbound/howto-anchor/\"))));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Tested Environment"},{"depth":2,"value":"Install wireguard on server"},{"depth":2,"value":"Generate server and client keys"},{"depth":2,"value":"Generate server and client keys"},{"depth":2,"value":"Create server configuration file"},{"depth":2,"value":"Configure DNS"},{"depth":2,"value":"Create server configuration file"},{"depth":2,"value":"Configure DNS"},{"depth":2,"value":"Start wireguard service on server"},{"depth":3,"value":"Setup clients"},{"depth":2,"value":"Server side"},{"depth":2,"value":"Client side"},{"depth":2,"value":"Reference"}]}},"pageContext":{"slug":"/tech-notes/system/application/wireguard-on-aws/","next":{"label":"Back to Main Page","link":"https://rdu.im"},"repositoryEditUrl":"https://github.com/rxdu/note/tree/main/src/docs/tech-notes/system/application/wireguard-on-aws.mdx","repositoryProvider":"GitHub"}},"staticQueryHashes":["1954253342","2328931024","2501019404","973074209"]}