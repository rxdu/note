{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/tech-notes/system/software/endianness","result":{"data":{"mdx":{"id":"3e57f8bf-7582-5baa-bacf-2410dabb036d","excerpt":"Big-endian systems store the most significant byte of a word in the smallest address and the least significant byte is stored in the largest address. Littleâ€¦","fields":{"slug":"/tech-notes/system/software/endianness/"},"frontmatter":{"title":"Endianness","description":null,"image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Endianness\",\n  \"description\": null\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Big-endian systems store the most significant byte of a word in the smallest address and the least significant byte is stored in the largest address. Little-endian systems, in contrast, store the least significant byte in the smallest address.\", \"[1]\"), mdx(\"p\", null, \"For example, there is a number in hexadecimal: 0x01234567, with the most significant byte 0x01 and least significant byte 0x67. It is stored within the address range 0x100 through 0x103.\", \"[2]\"), mdx(\"p\", null, \"Big-endian:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Address\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0x100\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0x101\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0x102\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0x103\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Value\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0x01\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0x23\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0x45\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0x67\")))), mdx(\"p\", null, \"Little-endian:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Address\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0x100\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0x101\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0x102\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0x103\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Value\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0x67\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0x45\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0x23\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0x01\")))), mdx(\"p\", null, \"Different processors may follow different conventions. For example the Intel x86 and x86-64 series of processors use the little-endian format while the Motorola 6800 and 68k series of processors use the big-endian format. And newer versions of ARM processors support bi-endian.\", \"[1]\", \" The most important thing is the consistency. One should keep the used convention in mind when (1) binary data are communicated over a network  between different machines; (2) looking at the byte sequences representing integer data, say inspecting machine-level code generated by a disassembler; (3) programs are written that circumvent the normal type system, say using a data type cast in C.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[]}},"pageContext":{"slug":"/tech-notes/system/software/endianness/","next":{"label":"Back to Main Page","link":"https://rdu.im"},"repositoryEditUrl":"https://github.com/rxdu/note/tree/main/src/docs/tech-notes/system/software/endianness.mdx","repositoryProvider":"GitHub"}},"staticQueryHashes":["1954253342","2328931024","2501019404","973074209"]}